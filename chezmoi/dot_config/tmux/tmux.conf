
set  -g base-index      1
setw -g pane-base-index 1
# We need to set default-shell before calling new-session
# set  -g default-shell "${SHELL:/usr/bin/env zsh}"
# set  -g default-shell "$SHELL"

set -g status-keys vi
set -g mode-keys   vi

# rebind main key: C-Space
unbind C-b
set -g prefix C-Space
bind -N "Send the prefix key through to the application" \
  C-Space send-prefix

set  -g mouse             on
setw -g aggressive-resize off
setw -g clock-mode-style  12
set  -s escape-time       500
set  -g history-limit     2000

# setw -g aggressive-resize off
set-option -g detach-on-destroy off
set-option -g status-position bottom # top

set-option -g default-terminal 'screen-256color'
set-option -sa terminal-features ',xterm-kitty:RGB'
set -ga terminal-overrides ',xterm*:Tc'
# set -g default-terminal "screen-256color"
# set -ga terminal-overrides ",xterm-256color*:Tc"

# https://github.com/folke/tokyonight.nvim#making-undercurls-work-properly-in-tmux
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

set -g set-titles on          # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

# bind -n C-l send-keys C-l \; run 'sleep 1.1' \; clear-history

set -g allow-passthrough on
set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM

# activity
set -g monitor-activity on
set -g visual-activity off

# create session
bind C-c command-prompt -p "New Session:" "new-session -A -s '%%'"

# kill session
bind C-k confirm kill-session

# reload tmux conf
bind r source-file "$HOME/.config/tmux/tmux.conf"

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# create new window
bind c new-window -c "#{pane_current_path}"

# split current window horizontally
bind - split-window -v -c "#{pane_current_path}"

# split current window vertically
bind _ split-window -h -c "#{pane_current_path}"

# Zoxide integration
bind-key t run-shell "t"
bind-key T run-shell "tz"

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
unbind n
unbind p
bind -r C-h previous-window # select previous window
bind -r C-l next-window     # select next window
bind Tab last-window        # move to last active window

# copy mode
set -g set-clipboard on
bind Enter copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'

run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
# run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard" 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'

# status line
set -g status "on"
set -g status-justify "left"

set -g status-left-length "100"
set -g status-right-length "100"

set -g status-left-style NONE
set -g status-right-style NONE

# set -g status-style bg=default
set -g status-right "#H"
# set -g status-interval 10     # redraw status line every 10 seconds

# https://github.com/christoomey/vim-tmux-navigator
# disable wrapping
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
| grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" { send-keys C-h } { if-shell -F '#{pane_at_left}'   {} { select-pane -L } }
bind-key -n 'C-j' if-shell "$is_vim" { send-keys C-j } { if-shell -F '#{pane_at_bottom}' {} { select-pane -D } }
bind-key -n 'C-k' if-shell "$is_vim" { send-keys C-k } { if-shell -F '#{pane_at_top}'    {} { select-pane -U } }
bind-key -n 'C-l' if-shell "$is_vim" { send-keys C-l } { if-shell -F '#{pane_at_right}'  {} { select-pane -R } }

bind-key -T copy-mode-vi 'C-h' if-shell -F '#{pane_at_left}'   {} { select-pane -L }
bind-key -T copy-mode-vi 'C-j' if-shell -F '#{pane_at_bottom}' {} { select-pane -D }
bind-key -T copy-mode-vi 'C-k' if-shell -F '#{pane_at_top}'    {} { select-pane -U }
bind-key -T copy-mode-vi 'C-l' if-shell -F '#{pane_at_right}'  {} { select-pane -R }
